---
import type { Content as Props } from '~/types';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';
import ItemGrid from '~/components/ui/ItemGrid.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  items = [],
  columns,
  image = await Astro.slots.render('image'),
  isAfterContent = false,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
      title: 'text-4xl md:text-4xl font-bold tracking-tighter font-heading',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xs text-muted dark:text-slate-400 mt-2',
    }}
  />
  <div class="mx-auto max-w-7xl">
    <div class={`${!image ? '' : 'md:flex md:gap-16'}`}>
      <div class="md:basis-1/2">
        {content && <div class="mb-7 text-lg dark:text-slate-400" set:html={content} />}

        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon="tabler:check"
          classes={{
            container: `gap-y-4 md:gap-y-8 ${classes?.gridContainer ?? ''}`,
            panel: `p-1 items-center text-primary bg-white dark:bg-slate-900 rounded shadow-xl hover:shadow-lg transition ${classes?.panel ?? ''}`,
            title: `text-sm font-bold leading-6 dark:text-white rtl:ml-0 rtl:mr-2 ${classes?.title ?? ''}`,
            description: `text-muted dark:text-slate-400 ml-2 rtl:ml-0 rtl:mr-2 ${classes?.description ?? ''}`,
            icon: `flex h-12 w-12 items-center justify-center rounded-full text-gray-50 p-1 ${classes?.icon ?? ''}`,
            action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
          }}
        />
      </div>
      {
        image && (
          <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2">
              <div class="relative m-auto max-w-4xl">
                {typeof image === 'string' ? (
                  <Fragment set:html={image} />
                ) : (
                  <Image
                    class="mx-auto w-full rounded-lg bg-gray-500 shadow-lg"
                    width={500}
                    height={500}
                    widths={[400, 768]}
                    sizes="(max-width: 768px) 100vw, 432px"
                    layout="responsive"
                    {...image}
                  />
                )}
              </div>
          </div>
        )
      }
    </div>
  </div>
</WidgetWrapper>
